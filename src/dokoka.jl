#!/usr/bin/env julia

import LinearAlgebra as LA


mutable struct Atom
    species::String
    r::Vector{Float64}
end

mutable struct Molecule
    atoms::Vector{Atom}
end

mutable struct Configuration
    molecules::Vector{Molecule}
end


function readmol(filename::String)
    io = open(filename, "r")
    natoms = parse(Int64, readline(io))
    atoms = Vector{Atom}(undef, natoms)
    readline(io)
    for i in 1:natoms
        data = split(readline(io))
        atoms[i] = Atom(data[1], [parse(Float64, data[2]); parse(Float64, data[3]); 
                                      parse(Float64, data[4])])
    end
    close(io)
    return Molecule(atoms)
end


function getsize(molecule::Molecule)
    x = diff(collect(extrema([atom.r[1] for atom in molecule.atoms])))[1]
    y = diff(collect(extrema([atom.r[2] for atom in molecule.atoms])))[1]
    z = diff(collect(extrema([atom.r[3] for atom in molecule.atoms])))[1]
    return sqrt(x^2 + y^2 + z^2)
end


function getcenter(molecule::Molecule)
    return sum([atom.r for atom in molecule.atoms]) ./ length(molecule.atoms)
end


function rotate!(molecule::Molecule, angle::Float64, i::Float64, j::Float64, k::Float64)
    
    rotation_vector = sin(angle/2) / sqrt(i^2 + j^2 + k^2) * [i; j; k]
    q0 = cos(angle/2)
    qlen2 = rotation_vector[1]^2 + rotation_vector[2]^2 + rotation_vector[3]^2
    
    for a = eachindex(molecule.atoms)
        molecule.atoms[a].r = (q0^2 - qlen2) * molecule.atoms[a].r + 
                    2 * LA.dot(rotation_vector, molecule.atoms[a].r) * rotation_vector + 
                    2 * q0 * LA.cross(rotation_vector, molecule.atoms[a].r)
    end
end


function center!(molecule::Molecule)
    cm = getcenter(molecule)
    for atom in molecule.atoms
        atom.r -= cm
    end
end


function displace!(molecule::Molecule, displacement::Vector{Float64})
    for atom in molecule.atoms
        atom.r += displacement
    end
end


function generate_configuration(molecule1::Molecule, molecule2::Molecule, n::Int64)
    center!(molecule1)
    center!(molecule2)

    rotradius = (getsize(molecule1) + getsize(molecule2)) / 2
    displace!(molecule2, [rotradius; 0; 0])
    
    is = 2 * rand(Float64, n) .- 1
    js = 2 * rand(Float64, n) .- 1
    ks = 2 * rand(Float64, n) .- 1
    angles = 2 * pi * rand(Float64, n)

    for i = 1:n
        rotate!(molecule2, angles[i], is[i], js[i], ks[i])
        write_movie(Configuration([molecule1, molecule2]), "movie.xyz")
    end
end


function write_movie(configuration::Configuration, filename::String)
    io = open(filename, "a+")
    size = length(configuration.molecules) * length(configuration.molecules[1].atoms)
    println(io, size)
    println(io, "Generated by dokoka")
    for molecule in configuration.molecules
        for atom in molecule.atoms
            println(io, atom.species, " ", atom.r[1], " ", atom.r[2], " ", atom.r[3])
        end
    end
    close(io)
end


function (@main)(args)
    molecule1 = readmol(args[1])
    molecule2 = readmol(args[2])
    n = parse(Int64, args[3])
    @time generate_configuration(molecule1, molecule2, n)
end
