#!/usr/bin/env julia

using LinearAlgebra

mutable struct Atom
    species::String
    charge::Float64
    epsilon::Float64
    sigma::Float64
    x::Float64
    y::Float64
    z::Float64
end

mutable struct Molecule
    atoms::Vector{Atom}
end

mutable struct Configuration
    molecules::Vector{Molecule}
end


const KB = 1.38064852e-23
const EC = 1.60217662e-19
const VACUUM_PERMITTIVITY = 8.854187817e-12
const SCALELJ = 4 * KB 
const SCALEC = EC^2 / (4 * pi * VACUUM_PERMITTIVITY)


function lennard_jones(r::Float64, sigma::Float64, epsilon::Float64)
    return epsilon * ((sigma / r) ^ 12 - (sigma / r) ^ 6)
end


function coulomb(r::Float64, q1::Float64, q2::Float64)
    return q1 * q2 / r
end


function rotate(molecule::Molecule, rotcenter::Vector{Float64}, angle::Float64, 
                i::Float64, j::Float64, k::Float64)
    
    rotated_molecule = Vector{Atom}(undef, length(molecule.atoms))
    
    rotation_vector = sin(angle/2) / sqrt(i^2 + j^2 + k^2) * [i; j; k]
    q0 = cos(angle/2)
    qlen2 = rotation_vector[1]^2 + rotation_vector[2]^2 + rotation_vector[3]^2
    
    for index = eachindex(molecule.atoms)
        
        atom = molecule.atoms[index]
        position_vector = [atom.x; atom.y; atom.z] - rotcenter
       
        x, y, z = (q0^2 - qlen2) * position_vector + 
                  2 * dot(rotation_vector, position_vector) * rotation_vector + 
                  2 * q0 * cross(rotation_vector, position_vector)
        
        rotated_molecule[index] = Atom(atom.species, 1, 1, 1, x, y, z)
    end
    
    return Molecule(rotated_molecule)
end


function getcenter(molecule::Molecule)
    x = sum([atom.x for atom in molecule.atoms]) / length(molecule.atoms)
    y = sum([atom.y for atom in molecule.atoms]) / length(molecule.atoms)
    z = sum([atom.z for atom in molecule.atoms]) / length(molecule.atoms)
    return [x, y, z]
end


function readmol(filename::String)
    io = open(filename, "r")
    atoms = Vector{Atom}()
    i = 1
    for line in eachline(io)
        if i <= 2
            i += 1
            continue
        end
        fields = split(line)
        push!(atoms, Atom(fields[1], 1, 1, 1, parse(Float64, fields[2]), 
                          parse(Float64, fields[3]), parse(Float64, fields[4])))
        i += 1
    end
    close(io)
    return Molecule(atoms)
end


function generate_configuration(molecule1::Molecule, molecule2::Molecule, n::Int64)
    cm = getcenter(molecule1) .+ 3
    for i = 1:n
        i, j, k = 2 * rand(Float64, 3) .- 1
        angle = 2 * pi * rand(Float64)
        molecule2 = rotate(molecule2, cm, angle, i, j, k)
        configuration = Configuration([molecule1, molecule2])
        write_movie(configuration, "movie.xyz")
    end
end


function write_movie(configuration::Configuration, filename::String)
    io = open(filename, "a+")
    size = length(configuration.molecules) * length(configuration.molecules[1].atoms)
    println(io, size)
    println(io, "Generated by dokoka")
    for conf in configuration.molecules
        for atom in conf.atoms
            println(io, atom.species, " ", atom.x, " ", atom.y, " ", atom.z)
        end
    end
    close(io)
end


function (@main)(args)
    molecule1 = readmol(args[1])
    molecule2 = readmol(args[2])
    n = parse(Int64, args[3])
    generate_configuration(molecule1, molecule2, n)
end
